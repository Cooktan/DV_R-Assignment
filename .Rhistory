setwd("~/Desktop/DV_R-Assignment")
#Data inspection
genotypes <- read.delim("fang_et_al_genotypes.txt")
snp_pos <-read.delim("snp_position.txt")
file.info("fang_et_al_genotypes.txt")
file.info("snp_position.txt")
#to determine just size of the file
file.size("fang_et_al_genotypes.txt")
file.size("snp_position.txt")
#to find the number of rows and columns:
dim(genotypes)
dim(snp_pos)
#PART1-DATA PROCESSING:
if(!require("tibble")) install.packages("tibble")
library(tibble)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
#parse Maize and Teosinte data by the groups we need:
maize_genotypes <- subset(genotypes, Group == "ZMMIL" | Group == "ZMMLR" | Group == "ZMMMR")
teo_genotypes <- subset (genotypes, Group == "ZMPBA" | Group == "ZMPIL" | Group == "ZMPJA")
#tranpose the each genotype data:
transposed_maize <- as.data.frame(t(maize_genotypes))
transposed_teo <- as.data.frame(t(teo_genotypes))
#Progress check:
View(transposed_maize)
names(transposed_maize) <- lapply(transposed_maize[1,], as.character) #this makes column one a character
transposed_maize <- transposed_maize [-1,]
names(transposed_teo) <- lapply(transposed_teo[1, ], as.character)
transposed_teo <- transposed_teo[-1,]
new_transposed_maize <- rownames_to_column(transposed_maize, var="SNP_ID")
new_transposed_teo <- rownames_to_column(transposed_teo, var="SNP_ID")
sorted_maize <- arrange(new_transposed_maize, SNP_ID)
sorted_teo<- arrange(new_transposed_teo, SNP_ID)
#Parse the snp data to only have SNP_ID, chromsome_ and position and sort by SNP_ID
snp_pos_chrom <- snp_pos[, c("SNP_ID", "Chromosome", "Position")]
sorted_snp_pos_chrom <- arrange(snp_pos_chrom, SNP_ID)
#join sorted_maize genotypes and sorted_teosinte with the sorted_snp_pos_chrom data
joined_maize <- merge(sorted_snp_pos_chrom,sorted_maize, by.x="SNP_ID", by.y="SNP_ID", all = TRUE)
joined_teosinte <- merge(sorted_snp_pos_chrom,sorted_teo, by.x="SNP_ID", by.y="SNP_ID", all = TRUE)
#PART2-DATA GRAPHING
#load the following
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("tibble")) install.packages("tibble")
library(tibble)
if (!require("reshape2")) install.packages("reshape2")
library(reshape2)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("plyr")) install.packages("plyr")
library(plyr)
#transform the original genotypes file
transposed_genotypes <- as.data.frame(t(genotypes))
names(transposed_genotypes) <- lapply(transposed_genotypes[1,], as.character) #this makes column one a character
transposed_genotypes <- transposed_genotypes[-1,]
new_transposed_genotypes <- rownames_to_column(transposed_genotypes, var="SNP_ID")
#sort new_transposed_genotypes with SNP_ID and join with sorted_snp_pos_chrom
sorted_genotypes <- arrange(new_transposed_genotypes, SNP_ID)
joined_genotypes <- merge(sorted_snp_pos_chrom,sorted_genotypes, by.x="SNP_ID", by.y="SNP_ID", all = TRUE)
SNP_header <- colnames(genotypes)[-c(1:3)] #making a header for all SNP_IDs.
m.genotype  <- melt(genotypes, measure.vars = SNP_header) #using melt function make our SNP_ID as rows
colnames(m.genotype)[4] <- "SNP_ID" #renaming the 4th column from "variable" to SNP_ID
m.genotype[ m.genotype == "?/?" ] = "N/A"
#use mutate to create new df with new column called "HOMOZYGOUS" with TRUE and Falso
m.genotype_new <-
mutate(m.genotype, Homozygous = m.genotype$value=="A/A" | m.genotype$value=="C/C" | m.genotype$value=="G/G" | m.genotype$value=="T/T")
m.genotype_new$Homozygous [ m.genotype_new$Homozygous == "TRUE"] = "Homozygous"
m.genotype_new$Homozygous [ m.genotype_new$Homozygous == "FALSE"] = "Heterozygous"
m.genotype_new$Homozygous [ m.genotype_new$value == "N/A"] = "Missing"
m.joined_genotypes <- merge(snp_pos_chrom, sorted_genotypes, by.x="SNP_ID", by.y="SNP_ID", all = TRUE)
View(m.joined_genotypes)
rm(m.joined_genotypes)
View(maize_genotypes)
View(m.genotype_new)
m.joined_geno <- merge(sorted_snp_pos_chrom, m.genotype_new, by.x="SNP_ID", by.y="SNP_ID", all = TRUE)
View(m.joined_geno)
ggplot(data= m.joined_geno) +
geom_bar(mapping = aes(x = Chromosome, fill=Homozygous))+
scale_x_discrete(labels=NULL)
ggplot(data= m.joined_geno) +
geom_bar(mapping = aes(x = Chromosome, fill=Homozygous))+
scale_x_discrete(limits=c(1:10, "unknown", "multiple")) +
ggtitle(label = "Heterozygosity per Chromosome") +
xlab(label = "Chromosome #") +
ylab(label = "Amount of Heterozygosity")
View(m.genotype_new)
ggplot(m.genotype_new, aes(x = Group, fill=Homozygous)) + geom_bar(stat = "identity", position = "stack")
ggplot(m.genotype_new, aes(x = Group, y= value, fill=Homozygous)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = m.genotype_new) +
geom_bar(mapping=aes(x = Group, fill=Homozygous)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = m.genotype_new) +
geom_bar(mapping=aes(x = Group, fill=Homozygous))
ggplot(data= m.joined_geno) +
geom_bar(mapping = aes(x = Chromosome, fill=Homozygous))+
scale_x_discrete(limits=c(1:10, "unknown", "multiple")) +
ggtitle(label = "Heterozygosity per Chromosome") +
xlab(label = "Chromosome #") +
ylab(label = "Amount of Heterozygosity")
ggplot(data= m.joined_geno) +
geom_point(mapping = aes(x = Position)))
ggplot(data= m.joined_geno) +
geom_point(mapping = aes(x = Position))
ggplot(data= m.joined_geno) +
geom_point(mapping = aes(x = Position, y=SNP_ID))
ggplot(data = m.genotype_new) +
geom_bar(mapping = aes(x=Group, fill=Homozygous), position="dodge")
ggplot(data= m.joined_geno) +
geom_bar(mapping = aes(x = Chromosome, fill=Homozygous))+
scale_x_discrete(limits=c(1:10, "unknown", "multiple")) +
ggtitle(label = "Heterozygosity per Chromosome") +
xlab(label = "Chromosome #") +
ylab(label = "Amount of Heterozygosity")
ggplot(data= m.joined_geno) +
geom_bar(mapping = aes(x = Chromosome, fill=Homozygous),position="dodge")+
scale_x_discrete(limits=c(1:10, "unknown", "multiple")) +
ggtitle(label = "Heterozygosity per Chromosome") +
xlab(label = "Chromosome #") +
ylab(label = "Amount of Heterozygosity")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/DV_R-Assignment")
genotypes <- read.delim("fang_et_al_genotypes.txt")
snp_pos <-read.delim("snp_position.txt")
summary(genotypes)
summary(snp_pos)
setwd("~/Desktop/DV_R-Assignment")
genotypes <- read.delim("fang_et_al_genotypes.txt")
snp_pos <-read.delim("snp_position.txt")
setwd("~/Desktop/DV_R-Assignment")
genotypes <- read.delim("fang_et_al_genotypes.txt")
snp_pos <-read.delim("snp_position.txt")
summary(genotypes)
summary(snp_pos)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#PART1-DATA PROCESSING:
if(!require("tibble")) install.packages("tibble")
library(tibble)
